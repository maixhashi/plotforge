<div class="fixed-calendar hidden" id="bookmarked_shuffled_overviews_count_calendar">
  <div class="calendar-container">
    <%= month_calendar do |date| %>
      <div class="calendar-day">
        <div class="day-number"><%= date.day %></div>
        <% if @grouped_bookmark_for_count[date] %>
          <%= link_to  filter_bookmarked_overviews_by_date_user_bookmark_of_shuffled_overviews_path(date: date), remote: true, class: "count-wrapper" do %>
            <i class="fas fa-book-open"></i> <!-- アイコンをfa-filmに変更 -->
            <span class="count"><%= @grouped_bookmark_for_count[date] %></span>
            <i class="fas fa-heart"></i> <!-- アイコンをfa-filmに変更 -->
            <% end %>
        <% end %>
      </div>
    <% end %>
  </div>
  <div class="calendar-footer">
    <i class="fas fa-film" style="color: #2c4c64;"></i> <!-- アイコンをfa-filmに変更 -->
    あなたのブックマークしたあらすじ
    <i class="fas fa-film" style="color: #2c4c64;"></i> <!-- アイコンをfa-filmに変更 -->
  </div>
</div>


<style>
.fixed-calendar.visible {
  display: flex; /* 表示時にフレックスに変更 */
}

.hidden {
  display: none;
}

.calendar-container {
  display: flex;
  justify-content: center;
  width: 100%;
  max-width: 1100px; /* カレンダーの最大幅を設定 */
  align-items: center;
}

.fixed-calendar {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 80%;
  background-color: rgba(255, 255, 255, 0.9);
  z-index: 900;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  display: none; /* 初期状態で非表示 */
  flex-direction: column;
  align-items: center;
}

.content {
  padding: 20px;
}

.calendar-day {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  height: 100%; /* 日付セルの高さに合わせる */
}

.calendar-day .day-number {
  position: absolute;
  top: 5px;  /* Position the day number at the top left */
  left: 5px; /* Position the day number at the top left */
  font-size: 14px; /* Adjust font size as needed */
  font-weight: bold;
}

.count-wrapper {
  position: relative;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

.count-wrapper .fa-book-open { /* アイコンのサイズと色 */
  font-size: 24px; /* アイコンのサイズを適宜調整 */
  color: #2c4c64;
}

.count-wrapper .count {
  position: absolute;
  top: -16px; /* 上方向の調整 */
  right: -18px; /* 右方向の調整 */
  background-color: red; /* カウント数の丸の背景色 */
  color: white; /* カウント数のテキストの色 */
  border-radius: 50%; /* 丸い形にする */
  padding: 2px; /* テキスト周りの余白 */
  font-size: 12px; /* テキストサイズ */
  line-height: 1;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  width: 24px; /* 丸の幅を固定 */
  height: 24px; /* 丸の高さを固定 */
}

.count-wrapper .fa-heart {
  position: absolute;
  top: 12px;
  right: -12px;
  color: red;
  border-radius: 50%;
  padding: 2px;
  font-size: 6px;
  line-height: 1;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  width: 16px;
  height: 16px;}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const calendarContainer = document.querySelector('#bookmarked_shuffled_overviews_count_calendar');

  document.addEventListener('click', function(event) {
    const target = event.target.closest('.previous, .next, .today, .start-date');
    if (target) {
      event.preventDefault();
      const url = target.href;

      fetch(url, {
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.text())
      .then(html => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newCalendar = doc.querySelector('#bookmarked_shuffled_overviews_count_calendar').innerHTML;
        calendarContainer.innerHTML = newCalendar;
        registerNavigationEvents();  // 必要な場合にイベントハンドラを再登録
      });
    }
  });

  function registerNavigationEvents() {
    // ナビゲーションリンクのイベントハンドラを再登録
    document.querySelectorAll('.previous, .next, .today, .start-date').forEach(link => {
      link.addEventListener('click', event => {
        event.preventDefault();
        const url = event.target.href;

        fetch(url, {
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newCalendar = doc.querySelector('#bookmarked_shuffled_overviews_count_calendar').innerHTML;
          calendarContainer.innerHTML = newCalendar;
          registerNavigationEvents();  // 必要な場合にイベントハンドラを再登録
        });
      });
    });
  }

    function getFormattedDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
  
    // 現在の日付を取得
    const todayDate = new Date();
    const formattedDate = getFormattedDate(todayDate);
  
    function registerNavigationEvents() {
      document.querySelectorAll('.start-date').forEach(link => {
        link.addEventListener('click', event => {
          event.preventDefault();
          const baseUrl = event.target.closest('a').href;
          // URLのパスが"/filter_shuffled_overviews_by_date" で終わる場合に追加する
          // const url = `${baseUrl.replace(/\/filter_shuffled_overviews_by_date\/.*$/, '')}/filter_shuffled_overviews_by_date/${formattedDate}`;
  
          fetch(url, {
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => response.text())
          .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newCalendar = doc.querySelector('#bookmarked_shuffled_overviews_count_calendar').innerHTML;
            calendarContainer.innerHTML = newCalendar;
  
            // URLを更新
            window.history.pushState({}, '', url);
            window.location.reload();
  
            // Debug: check if shuffled-overview-list exists
            const shuffledOverviewList = doc.querySelector('.bookmarked-shuffled-overview-list');
            if (shuffledOverviewList) {
              document.querySelector('.bookmarked-shuffled-overview-list').innerHTML = shuffledOverviewList.innerHTML;
            } else {
              console.error('Shuffled overview list element not found.');
            }
            registerNavigationEvents();
          })
          .catch(error => console.error('Error:', error));
        });
      });
    }
  
    registerNavigationEvents();
  });
  
</script>