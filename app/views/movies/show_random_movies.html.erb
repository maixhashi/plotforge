<div>
  <div id="progress-container">
    <i class="fas fa-spinner fa-spin"></i> 
    <div id="progress-bar"></div>
  </div>

  <div class="shuffled-synopsis-container">
    <div id="shuffled-synopsis-generating-container">
      <div id="shuffled-synopsis-title"></div>
      <div id="shuffled-synopsis"></div>
    </div>
    <div id="button-container">
      <button id="read-aloud-button" class="btn btn-login">
        <i class="fas fa-volume-up"></i> 読み上げ
      </button>
      <button id="stop-button" class="btn btn-login">
        停止
      </button>
    </div>
  </div>
  <div id="movie-info-popup">
    <div id="popup-title"></div>
    <img id="popup-image" src="" alt="Movie Image">
  </div>
</div>

<style>
/* コンテナ全体のスタイリング */
#shuffled-synopsis-generating-container {
  top: -25px;
  overflow-y: auto;
  padding: 20px;
  position: relative;
  height: 300px;
  width: 1200px; /* 固定幅 */
  margin: 0 auto; /* コンテナを中央に配置 */
  background: #e0f7fa; /* 薄い明るい青 */
  box-sizing: border-box; /* パディングとボーダーを含めて幅を計算 */
  border-radius: 240px 15px 100px 15px / 15px 200px 15px 185px;
  border: 3px solid #333;
}

/* タイピングエフェクト部分のスタイリング */
/* タイピングエフェクトのスタイル */
.typing-effect {
  white-space: nowrap;
  overflow: hidden;
  border-right: 2px solid black; /* キャレットのスタイル */
  animation: typing 2s steps(40, end), blink-caret .75s step-end infinite;
}

@keyframes typing {
  from { width: 0; }
  to { width: 100%; }
}

@keyframes blink-caret {
  from, to { border-color: transparent; }
  50% { border-color: black; }
}

#shuffled-synopsis-title {
  font-size: 16pt;
  font-weight: bold;
  text-align: center;
  color: #333; /* タイトルの色 */
  animation: bounce 0.5s ease-in-out 3; /* アニメーションの設定（3回だけ繰り返す） */
  font-family: 'Gloock', serif; /* 古代風フォントの適用 */
}

/* タイピングエフェクト部分のスタイリング */
#shuffled-synopsis {
  position: relative;
  white-space: pre-wrap; /* テキストをそのまま改行 */
  font-family: 'Gloock', serif; /* 古代風フォントの適用 */
}

/* ボタンコンテナのスタイリング */
#button-container {
  text-align: center; /* ボタンを中央に配置 */
  margin-top: 10px; /* コンテナの下に余白を追加 */
}

#read-aloud-button {
  background: #b2ebf2;
  color: #00796b;
  padding: 0.5rem 1rem;
  text-decoration: none;
  border-radius: 4px;
  font-size: 1rem;
  transition: background 0.3s;
}

#stop-button {
  background: #ffccbc;
  color: #d32f2f;
  padding: 0.5rem 1rem;
  text-decoration: none;
  border-radius: 4px;
  font-size: 1rem;
  transition: background 0.3s;
}

/* 映画情報ポップアップのスタイリング */
#movie-info-popup {
  position: absolute;
  display: none;
  background-color: white;
  border: 1px solid black;
  padding: 10px;
  z-index: 1000; /* ポップアップの z-index */
  max-width: 300px;
  max-height: 200px;
  overflow: hidden;
}

/* ポップアップ内の画像のスタイリング */
#popup-image {
  max-width: 100%; /* 画像の最大幅を親要素に合わせる */
  max-height: 150px; /* 画像の最大高さを設定 */
  display: block; /* 画像の余白をなくす */
}

/* リンクのスタイル */
.movie-link {
  color: black;
  text-decoration: none;
}

/* プログレスバーのスタイリング */
#progress-container {
  position: relative;
  height: 20px;
  width: 1200px; /* プログレスバーの幅をコンテナに合わせる */
  margin: 0 auto; /* 中央に配置 */
  background-color: #e0f7fa; /* プログレスバーの背景色 */
  border-radius: 10px;
  border: 1px solid #333;
  margin-bottom: 50px; /* プログレスバーとコンテナの間に余白を追加 */
}

#progress-bar {
  height: 100%;
  background-color: #00796b; /* プログレスバーの色 */
  opacity: 0.5;
  width: 0%;
  border-radius: 10px;
  position: absolute;
  top: 0;
  left: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
}

/* fa-spin のスタイル */
#progress-bar.spinner {
  display: flex;
  align-items: center;
  justify-content: center;
}

.spinner-icon {
  font-size: 16px;
  color: white;
  margin-right: 5px;
  animation: fa-spin 1s infinite linear;
}

@keyframes fa-spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const titleText = 'あらすじ';
  const text = `<%= j @shuffled_synopsis %>`;
  const titleElement = document.getElementById('shuffled-synopsis-title');
  const container = document.getElementById('shuffled-synopsis');
  const progressBar = document.getElementById('progress-bar');
  const progressContainer = document.getElementById('progress-container');
  const popup = document.getElementById('movie-info-popup');
  const popupTitle = document.getElementById('popup-title');
  const popupImage = document.getElementById('popup-image');
  const readAloudButton = document.getElementById('read-aloud-button');
  const stopButton = document.getElementById('stop-button'); // 停止ボタン
  let index = 0;
  let voices = [];
  let isFemaleVoice = true; // 初期状態で女性の声を使用する

  // 音声リストを取得する
  async function getVoices() {
    return new Promise((resolve) => {
      voices = speechSynthesis.getVoices();
      if (voices.length) {
        resolve(voices);
      } else {
        speechSynthesis.onvoiceschanged = () => {
          voices = speechSynthesis.getVoices();
          resolve(voices);
        };
      }
    });
  }

  async function readAloud() {
    await getVoices(); // 音声リストを取得

    const utterance = new SpeechSynthesisUtterance(container.textContent);
    utterance.lang = 'ja-JP'; // 日本語設定

    // 音声の選択
    const voiceName = 'Kyoko'; // 音声名を固定
    const voice = voices.find(v => v.name.includes(voiceName)) || voices[0];
    utterance.voice = voice;

    speechSynthesis.speak(utterance);
  }

  function stopReading() {
    speechSynthesis.cancel(); // 読み上げを停止
  }

  // プログレスバーの更新
  function updateProgressBar() {
    const progress = (index / text.length) * 100;
    progressBar.style.width = `${progress}%`;

    if (progress < 100) {
      progressBar.classList.add('spinner');
    } else {
      progressBar.classList.remove('spinner');
    }
  }

  // タイトルにタイピングエフェクトを追加
  function typeTitle() {
    if (index < titleText.length) {
      titleElement.textContent = titleText.substring(0, index + 1);
      index++;
      setTimeout(typeTitle, 100); // タイピングの速度
    } else {
      index = 0;
      type(); // タイトルが終わったらあらすじのタイピングを開始
    }
  }

  function type() {
    if (index < text.length) {
      container.innerHTML = text.substring(0, index + 1);
      index++;
      updateProgressBar(); // プログレスバーを更新
      setTimeout(type, 10); // タイピングの速度を速くする
    } else {
      enableLinksAndHoverEvents(); // 全てのリンクを有効にし、ホバーイベントを設定
      localStorage.setItem('shuffledSynopsis', container.innerHTML); // 表示された内容を保存
    }
  }

  function enableLinksAndHoverEvents() {
    document.querySelectorAll('.movie-link').forEach(link => {
      link.addEventListener('mouseover', (event) => {
        const movieInfo = event.target.dataset.movieInfo;
        const movieImage = event.target.dataset.movieImage;
        popupTitle.textContent = movieInfo;
        popupImage.src = movieImage;

        popup.style.display = 'block';

        let top = event.clientY + window.scrollY + 10;
        let left = event.clientX + window.scrollX + 10;

        // ポップアップの幅と高さを取得
        const popupWidth = popup.offsetWidth;
        const popupHeight = popup.offsetHeight;

        // 画面の右端にはみ出ないように調整
        if (left + popupWidth > window.innerWidth + window.scrollX) {
          left = window.innerWidth + window.scrollX - popupWidth - 10;
        }

        // 画面の下端にはみ出ないように調整
        if (top + popupHeight > window.innerHeight + window.scrollY) {
          top = window.innerHeight + window.scrollY - popupHeight - 10;
        }

        popup.style.top = `${top}px`;
        popup.style.left = `${left}px`;
      });

      link.addEventListener('mouseout', () => {
        popup.style.display = 'none';
      });
    });
  }

  // 読み上げボタンにイベントリスナーを追加
  readAloudButton.addEventListener('click', readAloud);

  // 停止ボタンにイベントリスナーを追加
  stopButton.addEventListener('click', stopReading);

  // タイトルのタイピングエフェクトを開始
  typeTitle();

  // 音声リストを取得する
  getVoices();
});
</script>
