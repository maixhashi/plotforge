<div class="content">
  <div class="shuffled-overview-list">
    <% @followings.each do |following| %>
      <div class="shuffled-overview-item">
        <div class="shuffled-overview-header">
            <div class="author-info">
            <% if following.avatar? %>
              <%= link_to mypage_user_path(following), class: "header-link-of-shuffled-overview" do %>
                <div class="following-avatar-wrapper">
                  <%= image_tag following.avatar.url, class: 'user-avatar-on-following-list' %>
                  <% if following != current_user %>
                    <div id="<%= following.id %>-follow-button-container" class="follow-button-container">
                      <% if current_user.following?(following) %>
                        <%= render partial: 'follows/unfollow_button', locals: { user: following } %>
                      <% else %>
                        <%= render partial: 'follows/follow_button', locals: { user: following } %>
                      <% end %>
                    </div>
                  <% end %>
                  <div class="following-name">
                    <%= following.name %>
                  </div>
                </div>
              <% end %>
            <% else %>
              <%= link_to mypage_user_path(following), class: "header-link-of-shuffled-overview" do %>
                <div class="following-avatar-wrapper">
                  <i class="fa fa-user-circle fa-4x"></i>
                  <% if following != current_user %>
                    <div id="<%= following.id %>-follow-button-container" class="follow-button-container">
                      <% if current_user.following?(following) %>
                        <%= render partial: 'follows/unfollow_button', locals: { user: following } %>
                      <% else %>
                        <%= render partial: 'follows/follow_button', locals: { user: following } %>
                      <% end %>
                    </div>
                  <% end %>
                  <div class="following-name">
                    <%= following.name %>
                  </div>
                </div>
              <% end %>
            <% end %>
          </div>
        </div>

        <div class="following-content">
          <%= truncate(following.profile_sentence, length: 100, omission: '...') %>
        </div>
        <div>
          <% if following != current_user %>
            <div id="<%= following.id %>-follow-button-container" class="follow-formal-button-container">
              <% if current_user.following?(following) %>
                <%= render partial: 'follows/unfollow_formal_button', locals: { user: following } %>
              <% else %>
                <%= render partial: 'follows/follow_formal_button', locals: { user: following } %>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>
</div>
      
<style>
.follow-formal-button-container {
  border: none;
  background-color: #ffb5b5;
  cursor: pointer;
  position: relative;
  top: 15px;
  left: 400%;
}

.following-name {
  font-size: 16px;
  min-width: 200px;
  margin-left: 20px;
}

.following-avatar-wrapper {
  position: relative;
  width: 50px;
  height: 50px;
  margin-right: 10px;
  display: flex;
  flex-direction: row;
  align-content: center;
  align-items: center;
}

.user-avatar {
  display: block;
  max-width: 100px; /* アイコンの最大幅 */
  border-radius: 50%; /* アイコンを丸くする */
}

.user-avatar-on-following-list {
  display: block;
  min-width: 80px; /* アイコンの最大幅 */
  min-height: 80px; /* アイコンの最大幅 */
  max-width: 80px; /* アイコンの最大幅 */
  max-height: 80px; /* アイコンの最大幅 */
  border-radius: 50%; /* アイコンを丸くする */
}

.follow-button-container {
  position: absolute;
  bottom: -15px; /* アイコンの下部からの距離 */
  right: -30px; /* アイコンの右部からの距離 */
  z-index: 10; /* アイコンの上に表示するため */
}


.author-info {
  margin-bottom: 10px;
  font-size: 14px;
  color: #555;
  margin-right: 10px;
}

.author-avatar {
  max-width: 50px;
  border-radius: 50%;
}

.content {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100vh; /* ビューポートの高さに合わせる */
}

.shuffled-overview-list {
  display: flex;
  flex-direction: column;
  width: 95%;
  height: 100%;
  box-sizing: border-box;
  margin-top: 10px;
}


.shuffled-overview-item {
  position: relative; 
  display: flex; /* 横並びにする */
  align-items: flex-start; /* 上揃え */
  margin-bottom: 20px;
  border: 1px solid #ddd;
  border-radius: 5px;
  background-color: #f9f9f9;
  padding: 20px;
  width: 100%; /* 横幅を100%にして、親コンテナ内での幅を調整 */
  box-sizing: border-box;
}

.link-icon-to-shuffled-overview-show {
  position: absolute;
  top: 10px; /* Adjust as needed to place the icon slightly away from the top */
  right: 10px; /* Adjust as needed to place the icon slightly away from the right */
  font-size: 18px; /* Adjust the size of the icon as needed */
  cursor: pointer;
}

.link-icon-to-shuffled-overview-show i {
  display: block;
  color: #333; /* Change the color to match your design */
}

.movie-images-container {
  display: flex;
  flex-direction: column; /* 画像を縦に並べる */
  margin-right: 20px; /* あらすじとの間隔を調整 */
  position: relative; /* 相対位置に設定 */
}

.movie-images-on-profile {
  display: flex; /* 画像を横並びにする */
  flex-direction: row; /* 画像を縦に並べる */
  gap: 10px; /* 画像間の間隔 */
}

.movie-image-wrapper {
  position: relative; /* 子要素の絶対位置に基づく */
}

.movie-images img {
  max-width: 100px; /* 画像の幅を制限 */
  max-height: 150px; /* 画像の高さを制限 */
  object-fit: cover; /* 画像が領域に収まるように調整 */
}

.movie-bookmark-button-container {
  position: absolute; /* 絶対位置に設定 */
  bottom: 10px; /* 画像の下部に位置 */
  right: 10px; /* 画像の右部に位置 */
  display: flex;
  gap: 10px; /* ボタン間の間隔 */
}

.following-content {
  font-size: 16px;
  margin-bottom: 10px;
  position: relative;
  top: 15px;
  left: 100px;
  color: black;
}

.shuffled-overview-meta {
  font-size: 12px;
  color: #888;
}

.button-container {
  text-align: center;
  gap: 10px;
}

.movie-link {
  text-decoration: none;
  color: black;
}

.pagination-on-profile {
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const readMoreLinks = document.querySelectorAll('.read-more-button');

  readMoreLinks.forEach(function(link) {
    link.addEventListener('click', function(event) {
      event.preventDefault();

      const overviewId = event.currentTarget.dataset.id;
      const contentElement = document.getElementById(`shuffled-overview-content-${overviewId}`);
      const fullContentElement = document.getElementById(`full-content-${overviewId}`);

      if (contentElement && fullContentElement) {
        const fullContent = fullContentElement.innerHTML;

        // 切り詰められたコンテンツを完全なコンテンツに置き換える
        contentElement.innerHTML = fullContent;

        // 必要に応じて、「もっと見る」ボタンを削除または非表示にする
        event.currentTarget.style.display = 'none';
      } else {
        console.error('Content element or full content element not found');
      }
    });
  });
});

</script>